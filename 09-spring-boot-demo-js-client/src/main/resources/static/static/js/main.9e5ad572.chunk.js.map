{"version":3,"sources":["articles/Article.js","articles/ArticlesList.js","App.js","serviceWorker.js","index.js"],"names":["Article","_ref","article","Object","objectWithoutProperties","react_default","a","createElement","lib","className","textClassName","title","s","imageUrl","src","alt","content","ArticlesList","props","articles","m","map","articles_Article","key","id","waves","onClick","right","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fetch","then","resp","json","console","log","setState","catch","err","concat","articles_ArticlesList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6SAuBeA,MAlBf,SAAAC,GAAsC,IAApBC,EAAoBD,EAApBC,QAChB,OADoCC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,aAElCI,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKC,UAAU,gBACfJ,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMC,UAAU,qBAAqBC,cAAc,aAAaC,MAAOT,EAAQS,OAC/EN,EAAAC,EAAAC,cAACC,EAAA,IAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKI,EAAG,GACPV,EAAQW,UACJR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBAAuBK,IAAKZ,EAAQW,SAAUE,IAAKb,EAAQS,SAE/EN,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKI,EAAG,GACHV,EAAQc,aCYNC,MAvBf,SAAsBC,GAAO,IACpBC,EAAYD,EAAZC,SACP,OACEd,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKC,UAAU,iBACXJ,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKI,EAAG,GAAIQ,EAAG,GAEXD,EAASE,IAAI,SAAAnB,GAAO,OAChBG,EAAAC,EAAAC,cAACe,EAAD,CAASC,IAAKrB,EAAQsB,GAAItB,QAASA,OAI3CG,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKI,EAAG,GAAIQ,EAAG,GACff,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQiB,MAAM,QAAQC,QAAS,cAA/B,cAEIrB,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMmB,OAAK,GAAX,gBCaDC,qBAvBd,SAAAA,IAAa,IAAAC,EAAA,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAA4B,KAAAH,IACbC,EAAA1B,OAAA6B,EAAA,EAAA7B,CAAA4B,KAAA5B,OAAA8B,EAAA,EAAA9B,CAAAyB,GAAAM,KAAAH,QALAI,MAAQ,CACPhB,SAAS,IAKViB,MAAM,sCACDC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAlB,GACLqB,QAAQC,IAAItB,GACfU,EAAKa,SAAS,CAACvB,eACVwB,MAAM,SAAAC,GACXJ,QAAQC,IAAR,UAAAI,OAAsBD,MARXf,wEAaZ,OACCxB,EAAAC,EAAAC,cAACuC,EAAD,CAAc3B,SAAUY,KAAKI,MAAMhB,kBAnBpB4B,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.9e5ad572.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { Row, Col, Card } from 'react-materialize';\r\nimport './Article.css';\r\n\r\nfunction Article({article, ...props}) {\r\n  return (\r\n    <Row className=\"article-item\">\r\n    <Card className=\"blue-grey darken-1\" textClassName=\"white-text\" title={article.title}>\r\n    <Row>\r\n        <Col s={3}>\r\n        {article.imageUrl && \r\n            (<img className=\"Article-blog-picture\" src={article.imageUrl} alt={article.title}></img>) }\r\n        </Col>\r\n        <Col s={9}>\r\n            {article.content}\r\n        </Col>\r\n    </Row>\r\n    </Card>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Article;","import React from 'react';\r\nimport { Row, Col, Button, Icon } from 'react-materialize';\r\nimport Article from './Article';\r\n\r\nfunction ArticlesList(props) {\r\n  const {articles} = props;\r\n  return (\r\n    <Row className=\"articles-main\">\r\n        <Col s={12} m={4}>\r\n        {\r\n            articles.map(article => (\r\n                <Article key={article.id} article={article} />\r\n            ))\r\n        }\r\n        </Col>\r\n        <Col s={12} m={8}>\r\n        <div>\r\n            <Button waves=\"light\" onClick={() => {}}>\r\n                Add Article\r\n                <Icon right>add_box</Icon>\r\n            </Button>\r\n        </div>\r\n        </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default ArticlesList;","import React from 'react';\nimport ArticlesList from './articles/ArticlesList';\nimport './App.css';\n\nclass App extends React.Component {\n\tstate = {\n\t\tarticles:[]\n\t};\n\t\n\tconstructor(){\n\tsuper();\n\tfetch('http://localhost:8080/api/articles')\n    \t.then(resp => resp.json())\n    \t.then(articles => {\n    \t\tconsole.log(articles);\n\t\t\tthis.setState({articles});\n    \t}).catch(err => {\n\t\t\tconsole.log(`Error: ${err}`);\n\t\t});\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<ArticlesList articles={this.state.articles} />\n\t\t);\n\t    // return this.state.articles.map(\n\t\t//   article => (<Article key={article.id} value={article} />)\n\t    // );\n\t}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}